pass
student1='홍길동'
student = '김철수'
student = '이영희'
pass
student1='홍길동'
student = '김철수'
student = '이영희'
...
# 이런형태가 되면 코드가 길어짐 그래서 리스트를 만들어 하나의 공간에 순서대로 저장
# 저장시 리스명 선언, 대괄호[]로 감싸기, 쉼표(,)로 구분

student = ['홍길동','김철수','이영희']
# 리스트로 감싸면 이런형태가 된다.
# 리스트의 각 원소는 인덱스로 구분된다. 
# 인덱스란? 컴퓨터가 원소에게 부여하는 번호
# 앞에서 0,1,2,3 ... 뒤에서 -1,-2,-3 카운트 된다.

fruit = ["사과","포도","오렌지","바나나"]
print(fruit[0])
print(fruit[2])
print(fruit[-1])
print(fruit[-4])
사과
오렌지
바나나
사과

# fruit[0] 처럼 리스트의 특정 원소를 가리킬때 사용하는 [] 을 인덱싱 연산자라고 함
# 리스트 선언시 사용된 []과는 다름

fruit = ["사과","포도","오렌지","바나나"] # 리스트 선언
print(fruit[0]) # 인덱싱 연산자 사용
사과

# 컴퓨터 인식구조
# 1. ["사과","포도","오렌지","바나나"] 를 리스트 자료로 인식하고 fruit 라는 변수에 담음
# 2. print() 문 내에 있는 fruit를 보고 값을꺼내 치환
# 3. [] 문 뒤에 []가 또 있음으로 두번째는 인덱싱 연산자 임으로 인식하고 print()문 내에 있는 fruit를 꺼내 0번째를 치환하여 사과를 출력함

# 슬라이싱이란? 리스트에서 여러개의 원소를 한번에 꺼내는 것 

fruit = ["사과","포도","오렌지","바나나"]
print(fruit[-4]) 
print(fruit[1:3]) # 1, 2번 원소 추출
print(fruit[0:3]) # 0, 1, 2번 원소 추출
print(fruit[:3]) # 0, 1, 2번 원소 추출
print(fruit[2:4]) # 2, 3번 원소 추출
print(fruit[2:]) # 2, 3번 원소 추출
사과
['포도', '오렌지']
['사과', '포도', '오렌지']
['사과', '포도', '오렌지']
['오렌지', '바나나']
['오렌지', '바나나']

# 리스트는 연산 가능 덧셈, 곱셈, in, not in
'''
리스트1 + 리스트2 # 두 리스트 연결
리스트1 * 숫자 # 리스트 1을 숫자만큼 연결
값 in 리스트1 # 리스트1의 원소 중에 값이 있으면 True
값 not in 리스트1 # 리스트1의 원소 중에 값이 없으면 Ture
'''

fruit = ["사과","포도","오렌지","바나나"]
print(fruit[2:])
fruit1 = ["사과","포도","오렌지"]
fruit2 = ["tnqkr","귤","바나나"]
print(fruit1 + fruit2) # fruit1 과 fruit2 연결
print(fruit * 3) # fruit1을 세 번 연결
print("포도" in fruit1) # fruit1 리스트 중에 "포도"라는 원소가 있는지 확인
print("자몽" not in fruit1) # fruit1 리스트 중에 "자몽"이라는 원소가 없는지 확인
print("포도@" in fruit1) # fruit1 리스트 중에 "포도@" 이라는 원소가 있는지 확인
['오렌지', '바나나']
['사과', '포도', '오렌지', 'tnqkr', '귤', '바나나']
['사과', '포도', '오렌지', '바나나', '사과', '포도', '오렌지', '바나나', '사과', '포도', '오렌지', '바나나']
True
True
False
#마지막 줄은 print("포도@" in ["사과","포도","오렌지"]) 로 치환이 가능

# 리스트에 원소를 추가시 append()
# 리스트에 원소를 삭제시 remove(), del()
    # remove()는 원소의 값을 이용
    # del()은 원소의 인덱스를 이용
# 리스트 수정시 리스트명[수정할 인덱스] = 새로운값    
'''
리스트명.append(추가할 원소 값)
리스트명.remove(삭제할 원소 값)
del(리스트명[삭제할 인덱스])
리스트명[수정할 인덱스] = 새로운 값
'''
fruit = ["사과","포도","오렌지","바나나"]
print("포도@" in fruit1)
fruit.append("자몽") # 원소 추가 (리스트 맨 마지막에 추가)
print(fruit)
fruit.remove("바나나") # 원소 삭제 (원소의 값을 이용해 삭제)
print(fruit)
del(fruit[2]) # 원소 삭제(원소의 인덱스를 이용해 삭제)
print(fruit)
fruit[0] = "수박" # 원소 수정
print(fruit)
False
['사과', '포도', '오렌지', '바나나', '자몽']
['사과', '포도', '오렌지', '자몽']
['사과', '포도', '자몽']
['수박', '포도', '자몽']

foo = ["hello","world","python"]
result =len(foo)
print(result)
3

# sorted()는 리스트의 원소를 오름차순으로 정렬하는 함수
# reverse 옵션을 true 로 하면 내림차순으로 정렬 가능
# sorted(리스트명) # 오름차순 정렬
# sorted(리스트명, reverse = True) # 내림차순 정렬

foo = [7,3,5,2,1]
result1 = sorted(foo) # 오름차순정렬
result2 = sorted(foo, reverse = True) # 내림차순 정렬
print(result1, result2)
[1, 2, 3, 5, 7] [7, 5, 3, 2, 1]

# index()는 원솟값으로 해당 원소의 인덱스를 찾는 함수
print(fruit)
foo =["영희","철수","민희","상혁"]
result = foo.index("상혁")
print(result)
3

# 딕셔너리는 각 원소를 키(key)와 값(value)의 쌍으로 표현 쉼표(,)로 구분 후  중괄호{}로 감싼다
# 딕셔너리명 = { 키 : 값, 키 : 값, 키 : 값}
price = {"짜장면" : 6000, "짬뽕" : 7000, "탕수육" : 20000}
# 딕셔너리명[키] 인덱스 대신키로 특정 원소에 접근
print(price["짜장면"])
6000

# 딕셔너리는 키를 사용
# 리스트는 번호를 사용

# 딕셔너리명[새로운 키] = 새로운 값
# 딕셔너리명[수정할 키] = 새로운 값
# 딕셔너리는 append 를 사용할 필요가없음
# 원소 삭제할 떄 del(), 원소값을 이용해 삭제시 remove()


price = {"짜장면" : 6000, "짬뽕" : 7000, "탕수육" : 20000}
print(price["짜장면"]) # price 딕셔너리의 특정 원소 출력
price["짬뽕밥"] = 7500 # price 딕셔너리에 새 원소 추가
del(price["짬뽕"]) # price 딕셔너리의 특정 원소 삭제
price["짜장면"] = 6500 # price 딕셔너리의 특정 원솟값 수정
print(price)
6000
{'짜장면': 6500, '탕수육': 20000, '짬뽕밥': 7500}

# keys()는 딕셔너리의 모든 값을 가져온다
# 딕셔너리명.keys()

fruit = {"사과": 2000, "포도": 3500, "오렌지": 4500}
result = fruit.keys() # fruit 딕셔너리의 모든 키 가져오기
print(result)
dict_keys(['사과', '포도', '오렌지'])

# dict_keys는 딕셔너리의 키를 저장하는 자료형 이를보기 좋게 출력하려면 list를 씌우면 된다
fruit = {"사과": 2000, "포도": 3500, "오렌지": 4500}
result = fruit.keys() # fruit 딕셔너리의 모든 키 가져오기
print(list(result))
['사과', '포도', '오렌지']

# values()는 딕셔너리 내 모든 원소의 값을 가져온다.
# 딕셔너리명.values()

fruit = {"사과": 2000, "포도": 3500, "오렌지": 4500}
result = fruit.values() #fruit 딕셔너리의 모든 값 가져오기
print(list(result))
[2000, 3500, 4500]

# 딕셔너리의 모든 키, 값을 쌍으로 가져올때 : items()
fruit = {"사과": 2000, "포도": 3500, "오렌지": 4500}
result = fruit.items() # fruit 딕셔너리의 모든 키와 값을 쌍으로 가져오기
print(list(result))
[('사과', 2000), ('포도', 3500), ('오렌지', 4500)]

school = {"1반":[{"이름": "김민수", "성적": {"수학":90, "과학":88, "영어":94}},
                {"이름" : "박서연", "성적": {"수학":82, "과학":95, "영어":88}}
                ],
          
            "2반":[{"이름": "이지훈", "성적": {"수학":61, "과학":95, "영어":56}},
                {"이름" : "최윤아", "성적": {"수학":89, "과학":83, "영어":100}}
                ],
            
            "3반":[{"이름": "김민수", "성적": {"수학":77, "과학":87, "영어":95}},
            {"이름" : "박서연", "성적": {"수학":84, "과학":96, "영어":46}}
                ]
          }
print(school["1반"][0]["성적"]["수학"])# 1반 김민수의 수학성적출력
print(school["3반"][1]["성적"]["영어"])# 3반 송태민의 영어 성적 출력
90
46
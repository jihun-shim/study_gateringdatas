-- Active: 1729663448118@@192.168.0.63@27017@study_finance

db('study_finance').collection('posts').find({}).toArray()

db("study_finance").collection('posts').insertOne({'title' : "temp_first"
                                                , 'body' : "first_body"
                                                , 'visitor' : 40 })

db("study_finance").collection('posts').insertOne({'title' : "temp_second"
                                                , 'body' : "second_body"
                                                , 'visitor' : 5 })

db("study_finance").collection('posts').insertOne({'title' : "temp_third"
                                                , 'body' : "third_body"
                                                , 'visitor' : 60 })
                                            

// update
db('study_finance').collection("posts").updateOne(
                                                  {"title":"temp_third"} 
                                                  , {$set : {"body": "third !"}}
                                                  )

{"title":"temp_third"}  // 조건
{"body": "third !"}         // 내용

{"title":"temp_second", "visitor" : 5}  // 조건
{"body": "second !", "visitor":6}         // 내용

{"title":"temp_first"}//조건
{"title":"temp_third"}//내용

db("study_finance").collection("posts").updateOne(
                                                {"title":"temp_first"}
                                                , {"$set" : {"title":"temp_third"}}
                                                )

db('study_finance').collection('posts').updateOne(
                                                {"title":"temp_second", "visitor" : 5}
                                                , {$set : {"body": "second !", "visitor":6}}    
                                                    )

{} //조건
{"$inc" : {visitor:10}} //내용

db('study_finance').collection('posts').updateMany(
                                                    {}
                                                    , {"$inc" : {"visitor":10}} //숫자만가능
                                                    )

{"title" : "temp_third"} //조건
{"hobby": "read"} //내용

db("study_finance").collection("posts").updateMany(
                                                   {"title" : "temp_third"}
                                                   , {"$set" : {"hobby": "read"}} )

{}// 조건
{hobby: ""}// 내용

db("study_finance").collection("posts").updateMany(
                                                    {}
                                                    , {$unset : {hobby:""}} )

{title: "temp_second"}

db("study_finance").collection("posts").deleteMany({title: "temp_second"})

db('study_finance').collection('posts').insertMany(
[{"title" : "temp_second", "body" : "second body!", "visitor" : 11},
{"title" : "temp_fourth", "body" : "fourth body!", "visitor" : 12}])

-----------------------------------------------------------------------------------------
first = [{title : "temp_second"}, {title : "temp_fourth"}]// 조건

// visitor > 30//조건
{visitor : { $gt : 30}}

// visitor > 12 and visitor < 40 //조건
{$and : [{visitor : {$gte : 12}} , {visitor : {$lte : 40}}]}

// visitor in (11,50) // 조건
{visitor : {$in : [11,50]}}

db("study_finance").collection("posts").find(
                                           // {$and : [{title : "temp_second"}, {title : "temp_fourth"}]}
                                           // {$or : [{title : "temp_second"}, {title : "temp_fourth"}]}
                                           // {visitor : { $gt : 30}}
                                           //{$and : [{visitor : {$gte : 12}}, {visitor : {$lte : 40}}]}
                                           // {visitor : {$in : [11,50]}}
                                            ).toArray();



db('study_finance').collection('stocks').insertOne({name:"test", age: 20});


db('study_finance').collection('stocks').insertMany([
  { "symbol": "AAPL", "date": "2023-10-01", "price": 150.5, "volume": 10000 },
  { "symbol": "AAPL", "date": "2023-10-02", "price": 152.3, "volume": 12000 },
  { "symbol": "AAPL", "date": "2023-10-03", "price": 153.0, "volume": 11500 },
  { "symbol": "AAPL", "date": "2023-10-04", "price": 155.7, "volume": 13000 },
  { "symbol": "AAPL", "date": "2023-10-05", "price": 154.0, "volume": 12500 },
  { "symbol": "GOOGL", "date": "2023-10-01", "price": 2800, "volume": 5000 },
  { "symbol": "GOOGL", "date": "2023-10-02", "price": 2825.5, "volume": 5500 },
  { "symbol": "GOOGL", "date": "2023-10-03", "price": 2840, "volume": 6000 },
  { "symbol": "GOOGL", "date": "2023-10-04", "price": 2830, "volume": 4500 },
  { "symbol": "GOOGL", "date": "2023-10-05", "price": 2855, "volume": 7000 },
  { "symbol": "TSLA", "date": "2023-10-01", "price": 750, "volume": 8000 },
  { "symbol": "TSLA", "date": "2023-10-02", "price": 760, "volume": 8500 },
  { "symbol": "TSLA", "date": "2023-10-03", "price": 755, "volume": 9000 },
  { "symbol": "TSLA", "date": "2023-10-04", "price": 770, "volume": 9500 },
  { "symbol": "TSLA", "date": "2023-10-05", "price": 765, "volume": 9300 },
  { "symbol": "AMZN", "date": "2023-10-01", "price": 3300, "volume": 3000 },
  { "symbol": "AMZN", "date": "2023-10-02", "price": 3325, "volume": 3200 },
  { "symbol": "AMZN", "date": "2023-10-03", "price": 3340, "volume": 3100 },
  { "symbol": "AMZN", "date": "2023-10-04", "price": 3355, "volume": 3300 },
  { "symbol": "AMZN", "date": "2023-10-05", "price": 3360, "volume": 3500 },
  { "symbol": "MSFT", "date": "2023-10-01", "price": 290, "volume": 7000 },
  { "symbol": "MSFT", "date": "2023-10-02", "price": 295, "volume": 7500 },
  { "symbol": "MSFT", "date": "2023-10-03", "price": 292, "volume": 7700 },
  { "symbol": "MSFT", "date": "2023-10-04", "price": 298, "volume": 7200 },
  { "symbol": "MSFT", "date": "2023-10-05", "price": 299, "volume": 7800 },
  { "symbol": "NFLX", "date": "2023-10-01", "price": 650, "volume": 4500 },
  { "symbol": "NFLX", "date": "2023-10-02", "price": 660, "volume": 4700 },
  { "symbol": "NFLX", "date": "2023-10-03", "price": 655, "volume": 4400 },
  { "symbol": "NFLX", "date": "2023-10-04", "price": 670, "volume": 4800 },
  { "symbol": "NFLX", "date": "2023-10-05", "price": 665, "volume": 4900 },
  { "symbol": "META", "date": "2023-10-01", "price": 315, "volume": 6400 },
  { "symbol": "META", "date": "2023-10-02", "price": 320, "volume": 6600 },
  { "symbol": "META", "date": "2023-10-03", "price": 318, "volume": 6700 },
  { "symbol": "META", "date": "2023-10-04", "price": 325, "volume": 6800 },
  { "symbol": "META", "date": "2023-10-05", "price": 322, "volume": 6900 },
  { "symbol": "NVDA", "date": "2023-10-01", "price": 450, "volume": 5100 },
  { "symbol": "NVDA", "date": "2023-10-02", "price": 460, "volume": 5300 },
  { "symbol": "NVDA", "date": "2023-10-03", "price": 455, "volume": 5200 },
  { "symbol": "NVDA", "date": "2023-10-04", "price": 470, "volume": 5400 },
  { "symbol": "NVDA", "date": "2023-10-05", "price": 465, "volume": 5500 }
])

//입력이 되어있는 find
db('study_finance').collection('stocks').find({}).toArray()

1.특정 날짜 범위에서 특정 종목의 주식 데이터 조회
symbol이 "AAPL"이고 date가 "2023-10-02"에서 "2023-10-04" 사이에 해당하는 모든 문서를 조회하세요.

symbol == "AAPL"
date >= "2023-10-02" and date <= "2023-10-04"
{"symbol" : "AAPL"}
{"date" : {$gte : "2023-10-02"}} {"date" : {$lte : "2023-10-04"}}
{$and : [{"date" : {$gte : "2023-10-02"}}, {"date" : {$lte : "2023-10-04"}}]}
{$and : [{"symbol" : "AAPL"}, {$and : [{"date" : {$gte : "2023-10-02"}}, {"date" : {$lte : "2023-10-04"}}]}]}

db('study_finance').collection('stocks').find(
                                            {$and : [{"symbol" : "AAPL"}, {$and : [{"date" : {$gte : "2023-10-02"}}, {"date" : {$lte : "2023-10-04"}}]}]}
                                            ).toArray()

2.특정 가격 범위에 있는 주식 조회
price가 300에서 500 사이인 모든 주식 데이터를 조회하세요.

price >= "300" and price <= "500"
{"price" : ">=300"} {"price" : "<=500"}
{"price" : {$gte : 300}}{"price" : {$lte : 500}}
{$and : [{"price" : {$gte : 300}},{"price" : {$lte : 500}}]}

db('study_finance').collection('stocks').find(
                                           {$and : [{"price" : {$gte : 300}},{"price" : {$lte : 500}}]}
                                            ).toArray()

3.거래량이 평균 이상인 주식 조회
volume이 7000 이상인 모든 주식 데이터를 조회하세요.
volume >= 7000
{"volume" : >=7000}
{"volume" : {$gte : 7000}}
{$in : [{"volume" : {$gte : 7000}}]}

db('study_finance').collection('stocks').find(
                                            {"volume" : {$gte : 7000}}
                                            ).toArray()

4.여러 종목 중 하나를 포함하는 데이터 조회
symbol이 "AAPL", "TSLA", "GOOGL" 중 하나인 모든 주식 데이터를 조회하세요.
symbol == "AAPL" or symbol=="TSLA" or symbol=="GOOGL"
{symbol : "AAPL"} {symbol : "TSLA"} {symbol : "GOOGL"}
{$or :[{symbol : "AAPL"}, {symbol : "TSLA"}, {symbol : "GOOGL"}]}

db('study_finance').collection('stocks').find(
                                            {$or :[{symbol : "AAPL"}, {symbol : "TSLA"}, {symbol : "GOOGL"}]}
                                            ).toArray()

5.주식 가격이 특정 값 이하이면서 특정 거래량 이상인 데이터 조회
price가 700 이하이고 volume이 8000 이상인 주식 데이터를 모두 조회하세요.
price <=700 and volume >= 8000
{"price" : "<=700"} {"volume" : ">=8000"}
{"price" : {$lte : 700}} {"volume" : {$gte : 8000}}
{$and : [{"price" : {$lte : 700}}, {"volume" : {$gte : 8000}}]}

db('study_finance').collection('stocks').find(
                                            {$and : [{"price" : {$lte : 700}}, {"volume" : {$gte : 8000}}]}
                                            ).toArray()

6.여러 조건을 사용하여 특정 주식 필터링
symbol이 "MSFT"이거나 price가 300 이상인 모든 주식 데이터를 조회하세요.
symbol=="MSFT" or price >= 300
{"symbol" : "MSFT"} {"price" : ">=300"}
{"symbol" : "MSFT"} {"price" : {$gte : 300} }
{$or : [{"symbol" : "MSFT"},{"price" : {$gte : 300}}]}

db('study_finance').collection('stocks').find(
                                            {$or : [{"symbol" : "MSFT"},{"price" : {$gte : 300}}]}
                                            ).toArray()


7.특정 날짜 이후로 거래된 주식 조회 (날짜 기준으로 정렬)
date가 "2023-10-03" 이후인 모든 주식 데이터를 조회하고, 날짜 순으로 정렬하세요.
date >= "2023-10-03"
{"date" : ">=2023-10-03"}
{"date" : {$gte : "2023-10-03"}}

8.하나의 조건에 두 개 이상의 논리 조건 사용
symbol이 "AAPL"이거나 price가 150 이상이고, volume이 7000 미만인 모든 주식 데이터를 조회하세요.
symbol == "AAPL" or price >= 150 and volume < 7000
{"symbol" : "AAPL"} {"price" : ">=150"} {"volume" : "<7000"} 
{"price" : {$gte : 150}} {"volume" : {$lt : 7000}}
{$and : [{"price" : {$gte : 150}}, {"volume" : {$lt : 7000}}]}
{$or : [{"symbol" : "AAPL"}, {$and : [{"price" : {$gte : 150}}, {"volume" : {$lt : 7000}}]}]}

db('study_finance').collection('stocks').find(
                                            {$or : [{"symbol" : "AAPL"}, {$and : [{"price" : {$gte : 150}}, {"volume" : {$lt : 7000}}]}]}
                                              ).toArray()

9.여러 조건을 조합하여 특정 패턴의 주식 데이터 조회
symbol이 "META" 또는 "NFLX"이며, volume이 5000 이상이거나 price가 650 이상인 주식 데이터를 조회하세요.

10. 값이 없는 데이터 조회 : price 필드가 null인 데이터를 반환
price == null
{"price" : "null"}

db('study_finance').collection('stocks').find(
                                            {"price" : "null"}
                                            ).toArray()

11. 다중 필드 검색 (OR 조건) : symbol이 "AAPL" 또는 "TSLA"이거나, price가 3000보다 큰 데이터를 검색

db('study_finance').collection('stocks').find(
                                            {}
                                            ).sort({price:-1}).skip(0).limit(10).toArray()